class Solution(object):
    def maxProfit(self, prices):
        n = len(prices)
        if n == 0:
            return 0
        
        l = [0] * n  # Max profit if the first transaction ends on or before day i
        r = [0] * n  # Max profit if the second transaction starts on or after day i
        
        minima = prices[0]
        maxima = prices[n - 1]
        
        # Fill the left array
        for i in range(1, n):
            if prices[i] >= minima:
                l[i] = max(l[i - 1], prices[i] - minima)
            else:
                minima = prices[i]
                l[i] = l[i - 1]
        
        # Fill the right array
        for i in range(n - 2, -1, -1):
            if prices[i] <= maxima:
                r[i] = max(r[i + 1], maxima - prices[i])
            else:
                maxima = prices[i]
                r[i] = r[i + 1]
        
        # Find the maximum profit by splitting at each day
        max_profit = 0
        for i in range(n):
            max_profit = max(max_profit, l[i] + r[i])
        
        return max_profit
